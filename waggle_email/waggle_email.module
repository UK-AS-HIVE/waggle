<?php

/**
 * Implements hook_help().
 */
function waggle_email_help($path, $arg) {
  switch ($path) {
    case 'admin/help#waggle_email':
      return '<p>' . t('Waggle email.') . '</p>';
  }
}

/*
/*
 * Implements hook_menu().
 */
function waggle_email_menu()
{
  $items = array();
  $items['admin/config/waggle/waggle_email'] = array(
    'title' => 'Waggle Email Settings',
    'description' => 'Settings page for waggle email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('waggle_email_admin_form'),
    'access arguments' => array('administer site configuration'), 
    'file' => 'waggle_email.admin.inc',
  );

  return $items;
}

function waggle_email_admin_form_validate($form, $form_state)
{
}

function waggle_email_admin_form_submit($form, &$form_state)
{
  $domain = $form_state['values']['email_domain'];
  $save_loc = $form_state['values']['attachment_save_location'];
  variable_set('waggle_email_default_domain', $domain);
  variable_set('waggle_email_attachment_save_location', $save_loc);
}


function waggle_email_node_insert($node) {
  if ($node->type === 'story') {
    global $user;
    $user = user_load($user->uid);
    $uids = array_unique(array_merge(
      array($node->uid),
      array_map(function($o) { return $o['uid']; }, $node->field_associated_users['und'])
    ));
    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) { return $r->name . ' <' . $r->mail . '>'; }, $recipients));
    drupal_mail('waggle_email', 'new_story', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!author' => $recipients[$node->uid]->name,
        '!body' => $node->body['und'][0]['value'],
        '!from_story' => true,
      ),
      $recipients[$node->uid]->mail, TRUE);
  }  
}


function waggle_email_comment_insert($comment) {
  $node = node_load($comment->nid);
  if ($node->type === 'story') {
    global $user;
    $account = user_load($comment->uid);
    $uids = array_unique(array_merge(
      array($node->uid),
      _check_associated_users($node)
    ));
    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) {
      $mail = $r->field_mail['und'][0]['value'];
      if (empty($mail)) $mail = $r->mail;
      return $r->name . ' <' . $mail . '>';
    }, $recipients));
    drupal_mail('waggle_email', 'new_note', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!author' => $account->name,
        '!body' => $comment->comment_body['und'][0]['value'],
        '!original_body' => $node->body['und'][0]['value'],
        '!original_author' => $recipients[$node->uid]->name,
        '!from_story' => true,
      ),
      $account->mail, TRUE);
  }  
 
}

function waggle_email_node_update($node) {
  $user = user_load($node->uid);

  //Associated users before the node was updated
  $originalAssocUsers = array_map(function($o) { return $o['uid']; }, $node->original->field_associated_users['und']);

  //if if there are users in the update node that werent there in the original node, email them.
  if(isset($originalAssocUsers)) {
    $addedUsers = array_diff(_check_associated_users($node), $originalAssocUsers);
  } else {
    $addedUsers = _check_associated_users($node);
  }

  $recipients = user_load_multiple($addedUsers);
  $address_list = implode(',', array_map(function ($r) { return $r->name . ' <' . $r->mail . '>'; }, $recipients));
  
  drupal_mail('waggle_email', 'associated_user', $address_list, $node->language,
    array(
      '!nid' => $node->nid,
      '!original_body' => $node->body['und'][0]['value'],
      '!original_author' => $user->name,
      '!from_story' => true,
    ),
    $user->mail, TRUE);
}

/**
 * Implements hook_mail().
 *
 * Defines the actual subjects and messages to be delivered.
 */
function waggle_email_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_story':
      $message['subject'] = t('Story# !nid', $params);
      $message['body'][] = t('<b>A new story has been opened by !author:</b><br/>!body<br/>'
        . '<br/>Visit <a href="https://help.as.uky.edu/story-search?ws=id:!nid+status:any">'
	      . 'the story</a> or reply to this email to respond.',
        $params);
      break;
    case 'new_note':
      $message['subject'] = t('Re: Story# !nid', $params);
      $message['body'][] = t(
        '<b>!author left a new note on your story:</b><br/>!body<br/><br/>'
        . '<br/><b>!original_author\'s original story was:</b><br/>!original_body<br/>'
        . '<br/>Visit <a href="https://help.as.uky.edu/story-search?ws=id:!nid+status:any">'
	      . 'the story</a> or reply to this email to respond.',
        $params);
      break;
    case 'associated_user':
      $message['subject'] = t('You have been associated with Story# !nid', $params);
      $message['body'] = t('You are now associated with Story #!nid'
        . '<br/><b>!original_author\'s original story was:</b><br/>!original_body<br/>'
        . '<br/>Visit <a href="https://help.as.uky.edu/story-search?ws=id:!nid+status:any">'
        . 'the story</a> or reply to this email to respond.',
        $params);
      break;
  }
}

/**
 * Implements hook_mail_alter()
 *
 * sets the sender and reply-to address as story-#######@domain.com
 *
 */
function waggle_email_mail_alter(&$message) {
  if ($message['params']['!from_story'] == true){
    global $base_root;
    $fromNode = $message['params']['!nid'];
    $thisDomain = str_replace(array('http://', 'https://'), '', $base_root);
    $replyTo = 'story-' . $fromNode . "@" . variable_get('waggle_email_default_domain', $thisDomain);
    $message['headers']['Reply-To'] = $replyTo;
    $message['headers']['From'] = $replyTo;
  }
}

/**
 * private function to check is assocated users is populated
 *
 */
function _check_associated_users($node) {
  $assoc_users = array_map(function($o) { return $o['uid']; }, $node->field_associated_users['und']);
  if (isset($assoc_users)) {
    return $assoc_users;
  }else{
    return array('');
  }
}
