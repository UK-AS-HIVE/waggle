<?php

/**
 * Implements hook_help().
 */
function waggle_email_help($path, $arg) {
  switch ($path) {
    case 'admin/help#waggle_email':
      return '<p>' . t('Waggle email.') . '</p>';
  }
}

/*
/*
 * Implements hook_menu().
 */
function waggle_email_menu()
{
  $items = array();
  $items['admin/config/waggle/waggle_email'] = array(
    'title' => 'Waggle Email Settings',
    'description' => 'Settings page for waggle email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('waggle_email_admin_form'),
    'access arguments' => array('administer site configuration'), 
    'file' => 'waggle_email.admin.inc',
  );

  $items['user/%user/waggle'] = array(
      'title' => 'Waggle Email',
      'description' => 'Email settings for waggle',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('waggle_email_user_form'),
      'access arguments' => array('access user profiles'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'waggle_email.admin.inc',
  );

  return $items;
}

function waggle_email_admin_form_validate($form, $form_state)
{
}

function waggle_email_admin_form_submit($form, &$form_state)
{
  $domain = $form_state['values']['email_domain'];
  $save_loc = $form_state['values']['attachment_save_location'];
  variable_set('waggle_email_default_domain', $domain);
  variable_set('waggle_email_attachment_save_location', $save_loc);
}

function waggle_email_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];

  $form['when_author'] = array(
    '#type' => 'fieldset',
    '#title' => 'If I am the author of a story, email me when:',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
  );

  $form['when_author']['as_auth_i_submit_story'] = array(
    '#type' => 'checkbox',
    '#title' => 'I submit the story',
    '#default_value' => isset($account->data['as_auth_i_submit_story']) ? $account->data['as_auth_i_submit_story'] : 1,
    '#required' => FALSE,
  );

  $form['when_author']['as_auth_i_leave_note'] = array(
    '#type' => 'checkbox',
    '#title' => 'I leave a note on the story',
    '#default_value' => isset($account->data['as_auth_i_leave_note']) ? $account->data['as_auth_i_leave_note'] : 1,
    '#required' => FALSE,
  );

  $form['when_author']['as_auth_other_leave_note'] = array(
    '#type' => 'checkbox',
    '#title' => 'Someone else leaves a note on the story',
    '#default_value' => isset($account->data['as_auth_other_leave_note']) ? $account->data['as_auth_other_leave_note'] : 1,
    '#required' => FALSE,
  );

  $form['when_author']['as_auth_status_change'] = array(
    '#type' => 'checkbox',
    '#title' => 'The status of the story changes',
    '#default_value' => isset($account->data['as_auth_status_change']) ? $account->data['as_auth_status_change'] : 1,
    '#required' => FALSE,
  );  

  $form['when_assoc'] = array(
    '#type' => 'fieldset',
    '#title' => 'If I am associated with a story, email me when:',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
  );

  $form['when_assoc']['as_assoc_i_leave_note'] = array(
    '#type' => 'checkbox',
    '#title' => 'I leave a note on the story',
    '#default_value' => isset($account->data['as_assoc_i_leave_note']) ? $account->data['as_assoc_i_leave_note'] : 1,
    '#required' => FALSE,
  );

  $form['when_assoc']['as_assoc_other_leave_note'] = array(
    '#type' => 'checkbox',
    '#title' => 'Someone else leaves a note on the story',
    '#default_value' => isset($account->data['as_assoc_other_leave_note']) ? $account->data['as_assoc_other_leave_note'] : 1,
    '#required' => FALSE,
  );

  $form['when_assoc']['as_assoc_status_change'] = array(
    '#type' => 'checkbox',
    '#title' => 'The status of the story changes',
    '#default_value' => isset($account->data['as_assoc_status_change']) ? $account->data['as_assoc_status_change'] : 1,
    '#required' => FALSE,
  );  
}

function waggle_email_user_presave(&$edit, $account, $category) {
  $edit['data']['as_auth_i_submit_story'] = isset($edit['as_auth_i_submit_story']) ? $edit['as_auth_i_submit_story'] : 1;
  $edit['data']['as_auth_i_leave_note'] = isset($edit['as_auth_i_leave_note']) ? $edit['as_auth_i_leave_note'] : 1;
  $edit['data']['as_auth_other_leave_note'] = isset($edit['as_auth_other_leave_note']) ? $edit['as_auth_other_leave_note'] : 1;
  $edit['data']['as_auth_status_change'] = isset($edit['as_auth_status_change']) ? $edit['as_auth_status_change'] : 1;
  $edit['data']['as_assoc_i_leave_note'] = isset($edit['as_assoc_i_leave_note']) ? $edit['as_assoc_i_leave_note'] : 1;
  $edit['data']['as_assoc_other_leave_note'] = isset($edit['as_assoc_other_leave_note']) ? $edit['as_assoc_other_leave_note'] : 1;
  $edit['data']['as_assoc_status_change'] = isset($edit['as_assoc_status_change']) ? $edit['as_assoc_status_change'] : 1;
}


function waggle_email_user_form_submit($form, &$form_state) {

}


function waggle_email_node_insert($node) {
  if ($node->type === 'story') {
    global $user;
    $user = user_load($user->uid);
    $uids = array_unique(array_merge(
      array($node->uid),
      array_map(function($o) { return $o['uid']; }, $node->field_associated_users['und'])
    ));

    //user email prefs check
    foreach ($uids as $key => $value) {
      $check_user = user_load($value);

      if (isset($check_user->data['as_auth_i_submit_story'])){
        if (($node->uid == $check_user->uid) && ($check_user->data['as_auth_i_submit_story'] == 0)){
          unset($uids[$key]);
        }
      }
    }

    $uids = array_values($uids);

    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) { return $r->name . ' <' . $r->mail . '>'; }, $recipients));
    drupal_mail('waggle_email', 'new_story', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!author' => $recipients[$node->uid]->name,
        '!body' => check_markup($node->body['und'][0]['value'], 'html_email'),
        '!from_story' => true,
      ),
      $recipients[$node->uid]->mail, TRUE);
  }  
}


function waggle_email_comment_insert($comment) {
  $node = node_load($comment->nid);
  if ($node->type === 'story') {
    global $user;
    $account = user_load($comment->uid);
    $uids = array_unique(array_merge(
      array($node->uid),
      _check_associated_users($node)
    ));


    // checks for email preferences
    foreach ($uids as $key=>$value) {
      $check_user = user_load($value);

      if(isset($check_user->data['as_auth_i_leave_note'])){
        if(($check_user->uid == $node->uid) && ($check_user->uid == $comment->uid) && ($check_user->data['as_auth_i_leave_note'] == 0)){
          unset($uids[$key]);
        }
      }

      if(isset($check_user->data['as_auth_other_leave_note'])){
        if(($check_user->uid == $node->uid) && ($check_user->uid != $comment->uid) && ($check_user->data['as_auth_other_leave_note'] == 0)){
          unset($uids[$key]);
        }
      }

      if(isset($check_user->data['as_assoc_i_leave_note'])){
        if(($check_user->uid != $node->uid) && ($check_user->uid == $comment->uid) && ($check_user->data['as_assoc_i_leave_note'] == 0)){
          unset($uids[$key]);
        }
      }

      if(isset($check_user->data['as_assoc_other_leave_note'])){
        if(($check_user->uid != $node->uid) && ($check_user->uid != $comment->uid) && ($check_user->data['as_assoc_other_leave_note'] == 0)){
          unset($uids[$key]);
        }
      }      

    }

    $uids = array_values($uids);

    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) {
      $mail = $r->field_mail['und'][0]['value'];
      if (empty($mail)) $mail = $r->mail;
      return $r->name . ' <' . $mail . '>';
    }, $recipients));

    drupal_mail('waggle_email', 'new_note', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!author' => $account->name,
        '!body' => check_markup($comment->comment_body['und'][0]['value'], 'html_email'),
        '!original_body' => check_markup($node->body['und'][0]['value'], 'html_email'),
        '!original_author' => $recipients[$node->uid]->name,
        '!from_story' => true,
      ),
      $account->mail, TRUE);
  }  
 
}

function waggle_email_node_update($node) {
  global $user;
  //$user = $user_load($user->uid);
  $author = user_load($node->uid);

  /***************************** check for new associated users and email them ***********/

  //Associated users before the node was updated
  if (isset($node->original->field_associated_users['und'])) {
    $originalAssocUsers = array_map(function($o) { return $o['uid']; }, $node->original->field_associated_users['und']);
  }

  //if if there are users in the update node that werent there in the original node, email them.
  if(isset($originalAssocUsers)) {
    $addedUsers = array_diff(_check_associated_users($node), $originalAssocUsers);
  } else {
    $addedUsers = _check_associated_users($node);
  }

  if(!empty($addedUsers)){ 


    $recipients = user_load_multiple($addedUsers);
    $address_list = implode(',', array_map(function ($r) { return $r->name . ' <' . $r->mail . '>'; }, $recipients));
   

    drupal_mail('waggle_email', 'associated_user', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!original_body' => check_markup($node->body['und'][0]['value'], 'html_email'),
        '!original_author' => $author->name,
        '!from_story' => true,
      ),
      $user->mail, TRUE);
  }

  /***************** check for updated story status *******************************/

  if ($node->field_status['und'][0] != $node->original->field_status['und'][0]){

    $new_status = taxonomy_term_load($node->field_status['und'][0]['tid']);
    $old_status = taxonomy_term_load($node->original->field_status['und'][0]['tid']);


    $uids = array_unique(array_merge(
      array($node->uid),
      _check_associated_users($node)
    ));

    //Email prefs check
    foreach ($uids as $key => $value) {

      $check_user = user_load($value);

      if(isset($check_user->data['as_auth_status_change'])){

        if(($check_user->uid == $node->uid) && ($check_user->data['as_auth_status_change'] == 0)){
          unset($uids[$key]);
        }

        if(($check_user->uid != $node->uid) && ($check_user->data['as_assoc_status_change'] == 0)){
          unset($uids[$key]);
        }
      }
    }

    $uids = array_values($uids);

    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) {
        $mail = $r->field_mail['und'][0]['value'];
        if (empty($mail)) $mail = $r->mail;
        return $r->name . ' <' . $mail . '>';
    }, $recipients));



    drupal_mail('waggle_email', 'status_change', $address_list, $node->language,
        array(
          '!nid' => $node->nid,
          '!original_body' => check_markup($node->body['und'][0]['value'], 'html_email'),
          '!original_author' => $author->name,
          '!updater' => $user->name,
          '!old_status' => $old_status->name,
          '!new_status' => $new_status->name,
          '!from_story' => true,
          ),
        $user->mail, TRUE);

  }


}

/**
 * Implements hook_mail().
 *
 * Defines the actual subjects and messages to be delivered.
 */
function waggle_email_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_story':
      $message['subject'] = t('Story# !nid', $params);
      $message['body'][] = t('<b>A new story has been opened by !author:</b><br/>!body<br/>'
        . '<br/>Visit <a href="https://' . _get_email_domain_name() . '/story-search?ws=id:!nid+status:any">'
	      . 'the story</a> or reply to this email to respond.',
        $params);
      break;
    case 'new_note':
      $message['subject'] = t('Re: Story# !nid', $params);
      $message['body'][] = t(
        '<b>!author left a new note on your story:</b><br/>!body<br/><br/>'
        . '<br/><b>!original_author\'s original story was:</b><br/>!original_body<br/>'
        . '<br/>Visit <a href="https://' . _get_email_domain_name() . '/story-search?ws=id:!nid+status:any">'
	      . 'the story</a> or reply to this email to respond.',
        $params);
      break;
    case 'associated_user':
      $message['subject'] = t('You have been associated with Story# !nid', $params);
      $message['body'] = t('You are now associated with Story #!nid'
        . '<br/><b>!original_author\'s original story was:</b><br/>!original_body<br/>'
        . '<br/>Visit <a href="https://' . _get_email_domain_name() . '/story-search?ws=id:!nid+status:any">'
        . 'the story</a> or reply to this email to respond.',
        $params);
      break;
    case 'status_change':
      $message['subject'] = t('The status of Story# !nid has been changed to !new_status', $params);
      $message['body'] = t('!updater has changed the status for Story #!nid from "!old_status" to "!new_status"<br /><br />'
        . '<br/><b>!original_author\'s original story was:</b><br/>!original_body<br/>'
        . '<br/>Visit <a href="https://' . _get_email_domain_name() . '/story-search?ws=id:!nid+status:any">'
        . 'the story</a> or reply to this email to respond.',
        $params);
      break;
  }
}

/**
 * Implements hook_mail_alter()
 *
 * sets the sender and reply-to address as story-#######@domain.com
 *
 */
function waggle_email_mail_alter(&$message) {
  if ($message['params']['!from_story'] == true){
    global $base_root;
    $fromNode = $message['params']['!nid'];
    $thisDomain = str_replace(array('http://', 'https://'), '', $base_root);
    //$replyTo = 'story-' . $fromNode . "@" . variable_get('waggle_email_default_domain', $thisDomain);
    $replyTo = 'story-' . $fromNode . "@" . _get_email_domain_name();
    $message['headers']['Reply-To'] = $replyTo;
    $message['headers']['From'] = $replyTo;
    $message['headers']['Bcc'] = $message['to'];
    $message['to'] = "noreply-all@" . _get_email_domain_name();
  }
}

/**
 * private function to check is assocated users is populated
 *
 */
function _check_associated_users($node) {
  if (isset($node->field_associated_users['und'])) {
    $assoc_users = array_map(function($o) { return $o['uid']; }, $node->field_associated_users['und']);
    return $assoc_users;
  }else{
    return array();
  }
}

function _get_email_domain_name() {
  $thisDomain = str_replace(array('http://', 'https://'), '', $base_root);
  return variable_get('waggle_email_default_domain', $thisDomain);
}
