<?php

/**
 * Implements hook_help().
 */
function waggle_email_help($path, $arg) {
  switch ($path) {
    case 'admin/help#waggle_email':
      return '<p>' . t('Waggle email.') . '</p>';
  }
}

/*
 * Implements hook_cron
 */
function waggle_email_cron()
{
  // TODO: eventually check the imap server for incoming messages, but
  // first make sure it _works_ and second make sure hook_cron is the right place
  // for this... sometimes the process is long-running, so it may not be
  waggle_email_collect_imap_messages();
}

/*
 * Implements hook_menu().
 */
function waggle_email_menu()
{
  $items = array();
  $items['admin/config/waggle_email'] = array(
    'title' => 'Waggle Email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('waggle_email_admin_form'),
    'access arguments' => array('administer site configuration'), 
    'file' => 'waggle_email.admin.inc',
  );
  $items['admin/config/waggle_email/imap_credentials'] = array(
    'title' => 'IMAP Credentials',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('waggle_email_admin_form'),
    'access arguments' => array('administer site configuration'), 
    'file' => 'waggle_email.admin.inc',
  );

  return $items;
}

function waggle_email_admin_form_validate($form, $form_state)
{
}

function waggle_email_admin_form_submit($form, &$form_state)
{
  $server = $form_state['values']['server'];
  $user = $form_state['values']['user'];
  $pass = $form_state['values']['pass'];
  $secure = $form_state['values']['secure'];
  variable_set('waggle_email_imap_server', $server);
  variable_set('waggle_email_imap_user', $user);
  variable_set('waggle_email_imap_pass', $pass);
  variable_set('waggle_email_imap_secure', $secure);
}

// TODO: this is the big mamma jamma-- connect to imap, get messages,
// create stories
function waggle_email_collect_imap_messages()
{
  $server = variable_get('waggle_email_imap_server');
  $imap_user = variable_get('waggle_email_imap_user');
  $imap_pass = variable_get('waggle_email_imap_pass');
  $use_secure = variable_get('waggle_email_imap_secure', 1);

  $imap = imap_open('{' . $server . ($use_secure?':993/imap/ssl}':':143/imap}'), $imap_user, $imap_pass, NULL, 1, array('DISABLE_AUTHENTICATOR' => 'GSSAPI') );

  $folders = imap_listmailbox($imap, '{' . $server . ':' . ($use_secure?'993':'143') . '}', '*');
  //drupal_set_message('folders: ' . print_r($folders,true));

  // TODO: store last date checked, and check against that
  //$search = imap_search($imap, 'SINCE "7 February 2012" UNSEEN', SE_UID);
  $search = imap_search($imap, 'SINCE "7 February 2012" SEEN', SE_UID);

  watchdog('waggle_email', 'Checking IMAP email', WATCHDOG_INFO); 
  drupal_set_message('Checking IMAP email');

  if (!$search)
  {
    watchdog('waggle_email', 'No new messages', WATCHDOG_INFO);
    drupal_set_message('No new messages');
    // no new messages
    return;
  }

  watchdog('waggle_email', 'Retrieved ' . sizeof($search) . ' messages.' , WATCHDOG_INFO);
  drupal_set_message('Retrieved ' . sizeof($search) . ' messages.');

  foreach ($search as $index => $uid)
  {
    // get message body. this marks it SEEN as well
    $body = imap_body($imap, $uid, FT_UID + FT_PEEK); // TODO: remove FT_PEEK to mark messages SEEN
    $header = imap_headerinfo($imap, $index, FT_PEEK);
    $structure = imap_fetchstructure($imap, $uid, FT_UID);
    $filename = "tests2/" . $index . ".txt";

    $handle = fopen($filename, 'w');
    fwrite($handle, serialize(array($header, $structure, $body)));
    fclose($handle);

    //waggle_email_process_message($header, $structure, $body);
  }

  imap_close($imap);

}

function waggle_email_process_message($header, $structure, $body)
{
  if ($structure->type === 0)
  {
    // text
    $text = $body;
  }
  else if ($structure->type === 1)
  {
    // multipart -- this has attachments
    $parts = explode($structure->parameters[0]->value,$body);
    $text = $parts[0];
  }

  // base-64 encoded
  if ($structure->encoding === 3)
  {
    $text = base64_decode($text);
  }
  elseif ($structure->encoding === 4)
  {
    $text = quoted_printable_decode($text);
  }

  //drupal_set_message('<pre>' . print_r(array($header, $structure, $text),true) . '</pre>');
  //drupal_set_message('serialization:\n' . serialize(array($header, $structure, $body)));

  // TODO: is this a note on a story, or a new story?
  //drupal_set_message('body:\n' . $text);
  //drupal_set_message('header:\n' . print_r($header, True));
  //drupal_set_message('message_id:\n' . $header->$message_id);
  //drupal_set_message('references:\n' . $header->$references);


  // TODO: map to users -- from, to, cc, bcc, sender
  $recipients = array();
  foreach(array('to','cc','bcc') as $recipient_type)
    if (isset($header->$recipient_type))
      $recipients = array_merge($recipients, $header->$recipient_type);
    
  foreach ($recipients as $recipient)
  {
    if ($recipient->host === 'uky.edu')
    {
      // mailbox name is LinkBlue name
      $associates[] = $recipient->mailbox;
    }
  }
}

function waggle_email_node_insert($node) {
  if ($node->type === 'story') {
    global $user;
    $user = user_load($user->uid);
    $uids = array_unique(array_merge(
      array($node->uid),
      array_map(function($o) { return $o['uid']; }, $node->field_associated_users['und'])
    ));
    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) { return $r->name . ' <' . $r->mail . '>'; }, $recipients));
    drupal_mail('waggle_email', 'new_story', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!author' => $recipients[$node->uid]->name,
        '!body' => $node->body['und'][0]['value'],
      ),
      $recipients[$node->uid]->mail, TRUE);
  }  
}


function waggle_email_comment_insert($comment) {
  $node = node_load($comment->nid);
  if ($node->type === 'story') {
    global $user;
    $user = user_load($user->uid);
    $uids = array_unique(array_merge(
      array($node->uid),
      array_map(function($o) { return $o['uid']; }, $node->field_associated_users['und'])
    ));
    $recipients = user_load_multiple($uids);
    $address_list = implode(',', array_map(function ($r) { return $r->name . ' <' . $r->mail . '>'; }, $recipients));
    drupal_mail('waggle_email', 'new_note', $address_list, $node->language,
      array(
        '!nid' => $node->nid,
        '!author' => $user->name,
        '!body' => $comment->comment_body['und'][0]['value'],
        '!original_body' => $node->body['und'][0]['value'],
        '!original_author' => $recipients[$node->uid]->name,
      ),
      $user->mail, TRUE);
  }  
 
}

/**
 * Implements hook_mail().
 *
 * Defines the actual subjects and messages to be delivered.
 */
function waggle_email_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_story':
      $message['subject'] = t('Story# !nid', $params);
      $message['body'][] = t('<b>A new story has been opened by !author:</b><br/>!body<br/>', $params);
      break;
    case 'new_note':
      $message['subject'] = t('Re: Story# !nid', $params);
      $message['body'][] = t(
        '<b>!author left a new note on your story:</b><br/>!body<br/><br/>'
        . '<br/><b>!original_author\'s original story was:</b><br/>!original_body<br/>'
        . '<br/>Visit <a href="https://help.as.uky.edu/story-search?ws=id:!nid+status:any">'
	. 'the story</a> to respond.',
        $params);
      break;
  }
}

