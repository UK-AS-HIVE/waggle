<?php

/**
 * Implements hook_node_update().
 */
function waggle_tracker_node_update($node){
  //Make sure a new version is being created, otherwise return
  if (!isset($node->original)){
    return;
  }

  $fields = field_info_instances('node', $node->type);
  $old_node = $node->original;
  global $user;

  //dpm($fields, 'fields');
  //dpm($node->original, 'old node');
  //dpm($node, 'new node');

  foreach($fields as $label => $field_info){
    $old_values = array();
    $new_values = array();
    $reference = TRUE;
    //$field_info = field_info_field($label);
    //Individual field label
    //$field_label = field_info_instance('node',$label,$node->type);
    //dpm($field_label, 'field label');
    //dpm($field_label['label'], 'individual field label');
    //dpm($field_info, 'field_info');
    //dpm($field_info['field_name'], 'field_name');
    //$field_index = array_shift(array_shift($field_info['indexes']));
    //dpm($label . ' uses index ' . $field_index);

    // Get any old values
    if(!empty($old_node->$label)){
      $temp = $old_node->$label;
      foreach($temp['und'] as $delta => $values){
        if(isset($values['value'])){
          $old_values[] = $values['value'];
          $reference = FALSE;
        }
        else if(isset($values['nid'])){
          $old_values[] = $values['nid'];
        }
        else if(isset($values['tid'])){
          $old_values[] = $values['tid'];
        }
        else if(isset($values['fid'])){
          $old_values[] = $values['fid'];
        }
        else if(isset($values['uid'])){
          $old_values[] = $values['uid'];
        }
      }
    }

    // Get any new values
    if(isset($node->$label['und'])){
      $temp = $node->$label;
      foreach($temp['und'] as $delta => $values){
        if(isset($values['value'])){
          $new_values[] = $values['value'];
          $reference = FALSE;
        }
        else if(isset($values['nid'])){
          $new_values[] = $values['nid'];
        }
        else if(isset($values['tid'])){
          $new_values[] = $values['tid'];
        }
        else if(isset($values['fid'])){
          $new_values[] = $values['fid'];
        }
        else if(isset($values['uid'])){
          $new_values[] = $values['uid'];
        }
      }
    }

    if($old_values != $new_values){
      //dpm(field_info_field($label), $label . ' field info');
	//dpm($old_values, $label . ' old values');
	//dpm($new_values, $label . ' new values');

      if(!$reference){
        if (count($old_values) < count($new_values)) {
          $count = count($new_values); }
        else $count = count($old_values);
        for($i=0; $i<$count; $i++) {
          $details_data = '';
          if ($label == 'field_role_visibility') {
            $roles = user_roles();
            $details_data = ' from '.$roles[$old_values[$i]].' to '.
                                 $roles[$new_values[$i]];
          } else {
            $details_data = ' from '.$old_values[$i].' to '.
                                 $new_values[$i];
          }
          db_insert('waggle_tracker')
            ->fields(array(
              'entity_id' => $node->nid,
              'entity_vid' => $node->vid,
              'entity_type' => 'node',
              'uid' => $user->uid,
              'user_vid' => $user->vid,
              'field' => $label,
              'field_id' => 0,
              'field_details' => $details_data,
              'summary' => '%u edited %f %d on %n.',
              'timestamp' => time(),
            ))
            ->execute();
        }
      }
      else{
        $in_common = array_intersect($old_values, $new_values);
        $removed = array_diff($old_values, $in_common);
        $added = array_diff($new_values, $in_common);
        $details_data = '';

        foreach($removed as $id){
          $details_data = waggle_tracker_get_data($label, $id);
          //dpm($id, 'removed id');
          db_insert('waggle_tracker')
            ->fields(array(
              'entity_id' => $node->nid,
              'entity_vid' => $node->vid,
              'entity_type' => 'node',
              'uid' => $user->uid,
              'user_vid' => $user->vid,
              'field' => $label,
              'field_id' => $id,
              'field_details' => $details_data,
              'summary' => '%u removed %d from %f on %n.',
              'timestamp' => time(),
            ))
            ->execute();
        }

        foreach($added as $id){
          $details_data = waggle_tracker_get_data($label, $id);
          //dpm($id, 'id');

          db_insert('waggle_tracker')
            ->fields(array(
              'entity_id' => $node->nid,
              'entity_vid' => $node->vid,
              'entity_type' => 'node',
              'uid' => $user->uid,
              'user_vid' => $user->vid,
              'field' => $label,
              'field_id' => $id,
              'field_details' => $details_data,
              'summary' => '%u added %d to %f on %n.',
              'timestamp' => time(),
            ))
            ->execute();
        }
      }
    }
  }
}

/*
For each label get the details from the respective table.
*/
function waggle_tracker_get_data($label, $id) {
  $data = '';
  if (($label == 'field_status') ||
      ($label == 'field_actions') ||
      ($label == 'field_user_category') ||
      ($label == 'field_tags')) {
    $field_details = db_select('taxonomy_term_data', 'ttd')
      ->fields('ttd', array('name'))
      ->condition('ttd.tid', $id, '=')
      ->execute();
            
    $details = $field_details->fetchAssoc();
    $data = $details[name];
  } else if (($label == 'field_associated_users') ||
             ($label == 'field_waiting') ||
             ($label == 'field_submitted_by')) {
    $associated = user_load($id);
    $data = $associated->name;
  } else if ($label == 'field_attachments') {
    $field_details = db_select('file_managed', 'fm')
      ->fields('fm', array('filename'))
      ->condition('fm.fid', $id, '=')
      ->execute();
              
    $details = $field_details->fetchAssoc();
    $data = $details[filename];
    if ($data == NULL) {
      $field_details = db_select('waggle_tracker', 'wt')
        ->fields('wt', array('field_details'))
        ->condition('wt.field_id', $id, '=')
        ->execute();
              
      $details = $field_details->fetchAssoc();
      $data = $details[field_details];
    }
  } 
 
  return $data;
}

/**
 * Implements hook_node_presave().
 */
function waggle_tracker_node_insert($node){
  global $user;
  db_insert('waggle_tracker')
    ->fields(array(
      'entity_id' => $node->nid,
      'entity_vid' => $node->vid,
      'entity_type' => 'node',
      'uid' => $user->uid,
      'user_vid' => $user->vid,
      'field' => 'new node',
      'field_id' => 0,
      'field_details' => 'new node created',
      'summary' => '%u created new node, %n',
      'timestamp' => time(),
    ))
    ->execute();
}

/**
 * Creates renderable history of a node, similar to comment_node_page_additions().
 */
function waggle_tracker_node_page_additions($node) {
  global $user;
  
  // TODO: check that user has access to this node

  $additions = array();
  $results = db_select('waggle_tracker', 'wt')
    ->fields('wt', array('uid','field','field_details','summary','timestamp'))
    ->condition('entity_id', $node->nid)
    ->execute();

  foreach ($results as $result) {
    $field_label = field_info_instance('node',$result->field,$node->type);
    //dpm($field_label, 'field label');
    $additions[] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . format_date($result->timestamp) . ': '
        . t($result->summary,
            array(
              '%u' => '@' . format_username(user_load($result->uid)),
              '%f' => $field_label['label'], //$result->field,
              '%d' => $result->field_details,
              '%n' => $node->nid,
            )) . '</p>',
    );
    //dpm($result, 'waggle_tracker node ' . $node->nid);
  }

  return $additions;
}

/*
* This is a copy of comment_node_page_additions($node)  from drupal 7
*/
function waggle_tracker_comment_node_page_additions($node) {
  $additions = array();
  $activity = array();

  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  if (($node->comment_count && user_access('access comments')) || user_access('administer comments')) {
    $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
    $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $comments = comment_load_multiple($cids);
      comment_prepare_thread($comments);
      $build = comment_view_multiple($comments, $node);
      //$build['pager']['#theme'] = 'pager';
      $additions['comments'] = $build;
    }
  }


  foreach ($additions['comments'] as &$comment) {
    $comment['#weight'] = $comment['comment_body']['#object']->created;
  }
  $additions['comments']['#sorted'] = FALSE;

  $results = db_select('waggle_tracker', 'wt')
    ->fields('wt', array('uid','field','field_details','summary','timestamp'))
    ->condition('entity_id', $node->nid)
    ->execute();

  foreach ($results as $result) {
    $field_label = field_info_instance('node',$result->field,$node->type);
    //dpm($field_label, 'field label');
    /*$activity[] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . format_date($result->timestamp) . ': '
        . t($result->summary,
            array(
              '%u' => '@' . format_username(user_load($result->uid)),
              '%f' => $field_label['label'], //$result->field,
              '%d' => $result->field_details,
              '%n' => $node->nid,
            )) . '</p>',
    );*/
    $user_load = user_load(array('uid' => $result->uid));
    $additions['comments'][] = array(
      '#type' => 'markup',
      '#markup' => '<div class="story-activity">' . /*theme('user_picture', array('account' => $user_load)) .*/ ' '
        . format_date($result->timestamp) . ': '
        . t($result->summary,
            array(
              '%u' => '@' . format_username(user_load($result->uid)),
              '%f' => $field_label['label'], //$result->field,
              '%d' => $result->field_details,
              '%n' => $node->nid,
            )) . '</div>',
      '#weight' => $result->timestamp,
    );
    //dpm($result, 'waggle_tracker node ' . $node->nid);
  }
  //$activity['pager']['#theme'] = 'pager';
  //$additions['activity'] = $activity;
  //dpm($additions['activity'], 'additions activity');

  //dpm($additions['comments'], 'additions comments');

  // Append comment form if needed.
  /*
  if (user_access('post comments') && $node->comment == COMMENT_NODE_OPEN && (variable_get('comment_form_location_' . $node->type,  COMMENT_FORM_BELOW) == COMMENT_FORM_BELOW)) {
    $build = drupal_get_form("comment_node_{$node->type}_form", (object) array('nid' => $node->nid));
    $additions['comment_form'] = $build;
  }
  */
  
  if ($additions) {
    $additions += array(
      '#theme' => 'comment_wrapper__node_' . $node->type,
      '#node' => $node,
      'comments' => array(),
      //'activity' => array(),
      //'comment_form' => array(),
    );
  }
  //dpm($additions);
  

  return $additions;
}
