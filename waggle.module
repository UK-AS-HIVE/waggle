<?php

/**
 *  Implements hook_menu()
 */
function waggle_menu()
{
    $items['stories'] = array(
      'page callback' => 'waggle_stories',
      'access arguments' => array('access content'),
    );
    // API
    $items['waggle/api/load-user'] = array(
      'page callback' => 'waggle_load_user',  
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    );
    $items['waggle/api/get-stories'] = array(
      'page callback' => 'waggle_load_stories_default',  
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/get-stories/%'] = array(
      'page callback' => 'waggle_load_stories',  
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/add-note'] = array(
      'page callback' => 'waggle_add_note',  
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/remove-user/%node/%'] = array(
      'page callback' => 'waggle_remove_user',  
      'type' => MENU_CALLBACK,
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    );
	$items['waggle/api/add-user/%node/%'] = array(
      'page callback' => 'waggle_add_user',  
      'type' => MENU_CALLBACK,
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    );
	$items['waggle/api/autocomplete/user/%node/%'] = array(
      'page callback' => 'waggle_autocomplete_user',  
      'type' => MENU_CALLBACK,
      'page arguments' => array(4, 5),
      'access arguments' => array('access content'),
    );

    return $items;
}

function waggle_stories()
{
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/input-controls.js');
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/page-calls.js');
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/functions.js');
    //drupal_add_js(drupal_get_path('module', 'waggle') . '/js/story-dom.js');
    drupal_add_js('
      jQuery(document).ready(function() {
        LoadUser();
        GetTickets();
        PrepareInterface();    
      });
    ', 'inline');

    return 'Loading Stories...';
}


/**
 * Implements hook_block_info()
 */
function waggle_block_info(){
  $blocks['waggle_sidebar'] = array(
    'info' => 'Waggle Sidebar',
	'cache' => DRUPAL_NO_CACHE,
	'status' => 1,
	'region' => 'sidebar_second',
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function waggle_block_view($delta = ''){
  switch ($delta) {
    case 'waggle_sidebar':
	  $block['subject'] = NULL;
	  $block['content'] = array(
	    '#type' => 'markup',
		'#markup' => '<div id="waggle-sidebar"></div>',
	  );
	  break;
  }
  
  return $block;
}



/*****   API CALLS  ********/

/**
 *   function to load and return the current user
 */
function waggle_load_user(){
  global $user;
  return drupal_json_encode($user);
}

/**
 *  function to load default stories, pass them through the appropriate view, and return the rendered html
 */
function waggle_load_stories_default(){
  //dsm('stories');
  return drupal_json_output(views_embed_view('waggle_stories', 'block'));
}

/**
 *  function to load stories of given nids, pass them through the appropriate view, and return the rendered html
 */
function waggle_load_stories($stories_arg){
  dsm($stories_arg);
  return views_embed_view('waggle_stories', 'page');
}

/**
 * Function to add a note to a given story nid.
 */
function waggle_add_note(){
  $get = $_GET;
  global $user;
  $node = node_load($get['nid']);
  // Return if the given nid is invalid, or belongs to a non-story node, or if the user-provided note is empty, or the user isn't logged in
  if (!$node || $node->type != 'story' || empty($get['note']) || $user->uid == 0) {
    return 'There was an error with your request.  If you continue to receive this message, please email ashelp@uky.edu or call 859-257-1541.';
  }
  
  $new_note = (object) array('type' => 'action');
  node_object_prepare($new_note);
  
  $new_note->title = $get['nid'] . '-' . time();
  $new_note->body['und'][0]['value'] = $get['note'];
  $new_note->field_story['und'][0]['nid'] = $get['nid'];
  node_save($new_note);
  if ($new_note) {
    $node->field_actions['und'][] = array('nid' => $new_note->nid);
	node_save($node);
  }
  drupal_json_output(views_embed_view('waggle_story_actions', 'block', $get['nid']));
  //return 'yes';
}

/**
 * Function to remove a given user from a given node.
 */
function waggle_remove_user($node, $uid){
  $found = FALSE;
  foreach($node->field_associated_users['und'] as $delta => $data){
    if($data['uid'] == $uid){
	  unset($node->field_associated_users['und'][$delta]);
	  node_save($node);
	  $found = TRUE;
	  break;
	}
  }
  drupal_json_output($found);
}

/**
 * Function to add a given user from a given node.
 */
function waggle_add_user($node, $uid){
  $found = FALSE;
  //Make sure the user isn't already attatched to this story
  foreach($node->field_associated_users['und'] as $delta => $data){
    if($data['uid'] == $uid){
	  $found = TRUE;
	  break;
	}
  }
  if(!$found){
    $node->field_associated_users['und'][] = array('uid' => $uid);
	node_save($node);
  }
  $account = user_load($uid);
  
  // @TODO This code mimicks the layout in views-view-fields--waggle-stories.tpl.php.  There may be a better way...
  $picture = '<img src="' . (empty($account->picture) ? drupal_get_path('module', 'waggle') . '/default_user.png' : file_create_url($account->picture->uri)) . '" alt="' . $account->name . '"/>';
  $name = array();
  if(!empty($account->field_name)){
    foreach($account->field_name['und']['0'] as $part){
	  if(!empty($part)){
	    $name[] = $part;
	  }
    }
  }
  $name = implode(' ', $name);
  $roll_over = 
    '<div class="associated-user-rollover">' .
  	  '<div class="picture">' . $picture . '</div>' . 
	  '<div class="name">' . $name . '</div>' . 
	  '<div class="linkblue">' . $account->name . '</div>' . 
	  '<a class="remove-user user-' . $uid . ' node-' . $node->nid . '" href="">Unassociate</a>' .
    '</div>';
  $json = '<div class="associated-user user-' . $uid . '"><div class="small-picture">' . $picture . '</div>' . $roll_over . '</div>';
  
  drupal_json_output($json);
}

/**
 * Autocomplete function for Add Associated User boxes
 */
function waggle_autocomplete_user($node, $string){
  $associated = array();
  foreach($node->field_associated_users['und'] as $delta => $data){
    if(!in_array($data['uid'], $associated)){
	  $associated[] = $data['uid'];
	}
  }
  $string_parts = explode(' ', $string);
  
  $query = db_select('users', 'u');
  $query->leftJoin('field_data_field_name', 'f', 'u.uid=f.entity_id');
  foreach($string_parts as $part){
	$query->condition(db_or()->condition('u.name', '%' . $part . '%', 'LIKE')
	  ->condition('u.mail', '%' . $part . '%', 'LIKE')
	  ->condition('f.field_name_first', '%' . $part . '%', 'LIKE')
	  ->condition('f.field_name_first', '%' . $part . '%', 'LIKE')
	  ->condition('f.field_name_middle', '%' . $part . '%', 'LIKE')
	);
  }
  if(!empty($associated)){
    $query->condition('u.uid', $associated, 'NOT IN');
  }
  $results = $query->fields('u', array('uid', 'name', 'picture'))
    ->fields('f', array('field_name_first', 'field_name_middle', 'field_name_last'))
	->condition('u.uid', array(0, 1), 'NOT IN')
	->range(0,5)
	->execute()
	->fetchAllAssoc('uid');
	
  foreach($results as $nid => $fields){
    $results[$nid]->picture = '<img src="' . ($fields->picture ? file_create_url(file_load($fields->picture)->uri) : drupal_get_path('module', 'waggle') . '/default_user.png') . '"/>';
  }
  drupal_json_output($results);
  //return '';
}