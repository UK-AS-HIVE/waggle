<?php

include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'waggle') . '/waggle.permissions.inc';

/**
 * Implements hook_menu().
 * @TODO Create a waggle api permission and make all api calls require it
 * @TODO Make the paths more RESTful, including returning the correct data when not POSTed
 */
function waggle_menu() {
  $items['waggle/api/staff-autocomplete-list'] = array(
    'page callback' => 'waggle_staff_autocomplete_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['waggle/api/story/add-user/%node'] = array(
    'page callback' => 'waggle_add_user',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['waggle/api/story/remove-user/%node'] = array(
    'page callback' => 'waggle_remove_user',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['waggle/api/story/status/%node'] = array(
    'page callback' => 'waggle_story_status',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}



/**
 * Implements hook_entity_info_alter().
 */
function waggle_entity_info_alter(&$entity_info) {
  $entity_info['user']['view modes']['waggle_association'] = array(
    'label' => t('Waggle Association'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function waggle_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'waggle') . '/templates';

  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);

  // Additional hooks can be added to this array to add other template suggestions.
  $hooks = array('user_profile', 'user_picture');
  foreach ($hooks as $h) {
    if (!isset($theme_registry[$h]['theme paths'])) { 
      $theme_registry[$h]['theme paths'] = array(); 
    } 
    _waggle_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

function _waggle_insert_after_first_element(&$a, $element) {
  if(is_array($a)) { 
    $first_element = array_shift($a); 
    if ($first_element) { 
      array_unshift($a, $first_element, $element); 
    } 
    else { 
      array_unshift($a, $element); 
    }
  }
}

/**
 * Implements hook_block_info().
 */
function waggle_block_info() {
  $blocks['waggle_story_sidebar'] = array(
    'info' => 'Waggle Story Sidebar',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'accordion',
  );
  $blocks['waggle_add_story'] = array(
    'info' => 'Waggle Add Story',
    'weight' => -1,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'accordion',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function waggle_block_view($delta = '') {
  switch ($delta) {
    case 'waggle_story_sidebar' :
      return array(
        'subject' => NULL,
        'content' => drupal_get_form('waggle_story_sidebar'),
      );
      break;
    case 'waggle_add_story' :
      return array(
        'subject' => NULL,
        'content' => waggle_add_story(),
      );
      break;
  }
}

/**
 * Renders the sidebar for Waggle pages dealing with story display
 *    Current possible $_GET data:
 *        ?s = Search string for the body_value.  Currently set to 'contains all words'.
 *        ?status = Tid for the story status (1 for open, 2 for closed).
 *        ?staff = Uid(s) for associated users, multiples joined with +.
 *        ?author = Uid for author.
 */
function waggle_story_sidebar($form, &$form_state) {
  global $user;
  $current_filters = array();
  $status = isset($_GET['status']) ? $_GET['status'] : 1; //current default in views
  switch ($status) {
    case 1:
      $label = 'open tickets';
      break;
    case 2:
      $label = 'closed tickets';
      break;
    case '1+2':
      $label = 'all tickets';
      break;
  }
  $status_options = array(
    '1' => 'open',
    '2' => 'closed',
    '1+2' => 'all',
  );

  if (isset($_GET['s'])) {
    $current_filters[] = array(
      'code' => 's=' . $_GET['s'],
      'label' => 'keywords: ' . $_GET['s'],
    );
  }
  if (isset($_GET['author'])) {
    $current_filters[] = array(
      'code' => 'author=' . $_GET['author'],
      'label' => 'author: ' . $_GET['author'],
    );
  }
  $i = 0;
  if (isset($_GET["staff"])) {
    foreach ($_GET["staff"] as $i => $uid) {
      $account = user_load($uid);
      $label = $account ? 'staff: ' . $account->name : 'bad user id - '. $uid;
      $current_filters[] = array(
        'code' => "staff[$i]=" . $uid,
        'label' => $label,
      );
    }
  }
  $current_filters_text = '<div id="current-filters"><ul>';
  foreach ($current_filters as $filter) {
    $current_filters_text .= '<li><a>' . $filter['label'] . '</a></li>';
  }
  $current_filters_text .= '</ul></div>';

  $filters_text = '<div id="current-filters"><ul>';
  $filters_text .= '<li><a href="/?author=' . $user->name . '">my submissions</a></li>';
  $filters_text .= '<li><a href="/?staff[0]=' . $user->uid . '">my stories</a></li>';
  $filters_text .= '</ul></div>';

  $form['search'] = array(
    '#type' =>'textfield',
    '#size' => 20,
    '#default_value' => empty($form_state['input']['search']) ? '' : $form_state['input']['search'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'search',
    '#prefix' => '<div style="display: none">',
    '#suffix' => '</div>',
  );
  $form['current_filters'] = array(
    '#type' => 'markup',
    '#markup' => $current_filters_text,
    '#prefix' => '<div class="sidebar-section-label">Current Filters</div>',
  );
  $form['filters'] = array(
    '#type' => 'markup',
    '#markup' => $filters_text,
    '#prefix' => '<div class="sidebar-section-label">Apply Filters</div>',
  );
  return $form;
}

/**
 * Generates the add story form for the accordion view.
 * Modled off node_add($type).
 */
function waggle_add_story() {
  global $user;
  if (!$user->uid) {
    return '';
  }

  module_load_include('inc', 'node', 'node.pages');
  $type = 'story';

  $types = node_type_get_types();
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => $type,
    'language' => LANGUAGE_NONE,
  );

  $output = drupal_get_form($type . '_node_form', $node);

  $name = $user->name;
  $account = user_load($user->uid);
  if (!empty($account->field_name)) {
    $name = implode(' ', array_filter($account->field_name['und'][0])) . ' (' . $name . ')';
  }
  $output['story_head']= array(
    '#type' => 'markup',
    '#markup' => '
      <div class="story-head clearfix">
        <div class="meta submitted">
          ' . theme('user_picture', array('account' => $user)) . '
          <div class="submitted"><div class="author-name">' . $name . '</div></div>
          <div class="time-ago">new story</div>
          <div class="details waggle-secondary"><a>edit details</a></div>
        </div>
      </div>',
    '#weight' => 1,
  );

  $output['story_extra_info'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => 'story-extra-info',
      'style' => 'display:none;',
    ),
    '#weight' => 2,
  );
  foreach ($output as $label => $item) {
    if (is_array($item) && preg_match('/field_/', $label)) {
      $output['story_extra_info'][$label] = $item;
      unset($output[$label]);
    }
  }

  $output['body']['#weight'] = 3;

  $output['story_foot'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => 'story-info-footer',
    ),
    '#weight' => 10,
  );
  foreach(array('actions') as $key){
    $output['story_foot'][$key] = $output[$key];
    unset($output[$key]);
  }

  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form ID: Comment Form.
 */
function waggle_form_comment_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form);
  if ($form['#node']->type == 'story') {
    global $user;
    $picture = theme('user_picture', array('account' => $user));

    $form['comment_body']['und'][0]['#title'] = '';
    $form['#prefix'] = '<div class="new-comment-wrapper" id="new-comment-wrapper-' . $form['#node']->nid 
      . '"><div class="attribution">' . $picture . '</div><div class="comment-text"><div class="comment-arrow"></div>';
    $form['#suffix'] = '</div></div>';
  }
}

/**
 * Implements hook_preprocess_user_profile().
 */
function waggle_preprocess_user_profile(&$vars) {
  if ($vars['elements']['#view_mode'] == 'waggle_association') {
    $vars['theme_hook_suggestions'][] = 'user_profile__waggle_association';
  }
}



/*****   API CALLS  ********/

/**
 * Function to add a given user from a given node.
 */
function waggle_add_user($node){
  if(isset($_POST['uid']) && $account = user_load($_POST['uid'])) {
    $uid = $account->uid;
  }
  else {
    drupal_json_output(FALSE);
    druapl_exit();
  }

  $found = FALSE;
  //Make sure the user isn't already attatched to this story
  foreach($node->field_associated_users['und'] as $delta => $data){
    if($data['uid'] == $uid){
      $found = TRUE;
      break;
    }
  }

  $json = 0;
  if (!$found) {
    $node->field_associated_users['und'][] = array('uid' => $uid);
    node_save($node);   
    $account = user_load($uid);
    $json = drupal_render(user_view($account, 'waggle_association'));
  }
  drupal_json_output('<div class="field-item">' . $json . '</div>');
}

/**
 * Function to remove a given user from a given node.
 */
function waggle_remove_user($node){
  if(isset($_POST['uid']) && $account = user_load($_POST['uid'])) {
    $uid = $account->uid;
  }
  else {
    drupal_json_output(FALSE);
    druapl_exit();
  }

  $found = FALSE;
  //Make sure the user is attatched to this story
  foreach($node->field_associated_users['und'] as $delta => $data){
    if($data['uid'] == $uid){
      $found = TRUE;
      unset($node->field_associated_users['und'][$delta]);
      $node->field_associated_users['und'] = array_values($node->field_associated_users['und']);
      unset($node->vid);
    }
  }

  if ($found) {
    node_save($node);   
  }
  drupal_json_output($found);
}

/** 
 * Changes the status of a story
 */
function waggle_story_status($node) {
  if ($node->type != 'story') {
    drupal_json_output(FALSE);
  }
  else if (isset($_POST['status'])) {
    // @TODO Change vid to voc machine name
    //drupal_json_output('first');
    $term = taxonomy_term_load($_POST['status']);
    if ($term && $term->vid == 3) {
      $node->field_status['und'][0] = array('tid' => $_POST['status']);
      node_save($node);
      if ($node) {
        drupal_json_output(1);
      }
      else {
        drupal_json_output(0);
      }
    }
  }
  else { 
    // If no POST status but correct node, return the current status
    $status = 1;
    if (!empty($node->field_status)) {
      $tid = $node->field_status['und'][0]['tid'];
      $status = array($tid => taxonomy_term_load($tid)->name);
    }
    drupal_json_output($status);
  }
}

/**
 * Autocomplete function for Add Associated User boxes
 */
function waggle_staff_autocomplete_list(){  
  $query = db_select('users', 'u');
  $query->leftJoin('field_data_field_name', 'f', 'u.uid=f.entity_id');
  $query->leftJoin('users_roles', 'r', 'r.uid=u.uid');
  $results = $query->fields('u', array('uid', 'name', 'picture', 'mail'))
    ->fields('f', array('field_name_first', 'field_name_middle', 'field_name_last'))
	->condition('u.uid', array(0, 1), 'NOT IN')
  ->condition('u.status', 1)
  ->condition('r.rid', 4)
	->execute()
	->fetchAllAssoc('uid');
	
  $accounts = array();
  foreach($results as $uid => $fields){
    $name_parts = array();
	foreach(array('field_name_first', 'field_name_middle', 'field_name_last') as $part){
	  if(!empty($fields->$part)){
	    $name_parts[] = $fields->$part;
	  }
	}
    $accounts[$uid] = array(
	  'name' => implode(' ', $name_parts),
	  'last_name' => $fields->field_name_last,
	  'first_name' => implode(' ', array($fields->field_name_first, $fields->field_name_middle)),
	  'mail' => $fields->mail,
	  'linkblue' => $fields->name,
	  'picture' => '<img src="' . ($fields->picture ? file_create_url(file_load($fields->picture)->uri) : drupal_get_path('module', 'waggle') . '/default_user.png') . '"/>',
  );
  }
  drupal_json_output($accounts);
}


/**
 * Function to create a new story.
 */
function waggle_start_story(){
  $get = $_GET;
  global $user;
  
  $new_story = (object) array('type' => 'story');
  node_object_prepare($new_story);

  // Look for @users and #tags in the body
  // @TODO Generalize this bit as its own function to avoid code duplication with waggle_add_note
  $body_parts = explode(' ', $get['note']);
  $add_users = array();
  foreach($body_parts as $delta => $part){
    switch(substr($part, 0, 1) == '@'){
      case '@':
        $linkblue = substr($part, 1);
        $account = user_load_by_name($linkblue);
        if($account && $account->uid){
          if(!empty($account->field_name)){
            $name_parts = array();
            foreach(array('first', 'middle', 'last') as $name_part){
              if(!empty($account->field_name['und'][0][$name_part])){
                $name_parts[] = $account->field_name['und'][0][$name_part];
              }
            }
            $full_name = implode(' ', $name_parts);
          }
          else{
            $full_name = $account->name;
          }
          $body_parts[$delta] = '<span class="tagged-user user-' . $account->uid . '">' . $full_name . '</span>';
          $add_users[] = $account->uid;
        }
        
        break;

      case '#':
        break;

      default:
        break;
    }
  }

  foreach($add_users as $add_uid){
    $new_story->field_associated_users['und'][] = array('uid' => $add_uid);
  }
  
  $new_story->title = 'story-' . time();
  $new_story->body['und'][0]['value'] = implode(' ', $body_parts);
  $new_story->body['und'][0]['format'] = 'filtered_html';

  if(isset($_GET['behalfof'])){
    $account = user_load_by_name($_GET['behalfof']);
    if($account){
      $new_story->uid = $account->uid;
      $new_story->field_submitted_by['und'][0]['uid'] = $user->uid;
    }
  }
  if(isset($_GET['due'])){
    $timestamp = strtotime($_GET['due']);
    if($timestamp){
      $new_story->field_due_date['und'][0]['value'] = date('Y/m/d H:i:s', $timestamp);
    }
  }
/*
  dpm($new_story);
  dpm($_GET);
  return '';
*/
  node_save($new_story);

  if($new_story){
    if(isset($_GET['s'])){
      waggle_load_stories(_waggle_search($_GET['s']));
      return;
    }
    else{
      waggle_load_stories_default();
      return;
    }
  }
  drupal_json_output(FALSE);
  //return 'yes';
}
