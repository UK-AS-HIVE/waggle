<?php

/**
 *  Implements hook_menu()
 */
function waggle_menu()
{
    $items['stories'] = array(
      'page callback' => 'waggle_stories',
      'access arguments' => array('access content'),
    );
    // API
    $items['waggle/api/load-user'] = array(
      'page callback' => 'waggle_load_user',  
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    );
	$items['waggle/api/load-all-users'] = array(
      'page callback' => 'waggle_load_users',  
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/get-stories'] = array(
      'page callback' => 'waggle_load_stories_default',  
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/get-stories/%'] = array(
      'page callback' => 'waggle_load_stories',  
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/add-note'] = array(
      'page callback' => 'waggle_add_note',  
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
    $items['waggle/api/remove-user/%node/%'] = array(
      'page callback' => 'waggle_remove_user',  
      'type' => MENU_CALLBACK,
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    );
	$items['waggle/api/add-user/%node/%'] = array(
      'page callback' => 'waggle_add_user',  
      'type' => MENU_CALLBACK,
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    );
	$items['waggle/api/search'] = array(
      'page callback' => 'waggle_search',  
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );
	
    return $items;
}

function waggle_stories()
{
    drupal_add_css(drupal_get_path('module', 'waggle') . '/css/waggle.css');
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/input-controls.js');
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/page-calls.js');
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/functions.js');
    drupal_add_js(drupal_get_path('module', 'waggle') . '/js/autocomplete.js');
    drupal_add_js('
      jQuery(document).ready(function() {
	    WaggleStoriesPage();   
      });
    ', 'inline');

    return 'Loading Stories...';
}


/**
 * Implements hook_block_info()
 */
function waggle_block_info(){
  $blocks['waggle_sidebar'] = array(
    'info' => 'Waggle Sidebar',
	'cache' => DRUPAL_NO_CACHE,
	'status' => 1,
	'region' => 'sidebar_second',
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function waggle_block_view($delta = ''){
  switch ($delta) {
    case 'waggle_sidebar':
	  $block['subject'] = NULL;
	  $block['content'] = array(
	    '#type' => 'markup',
		'#markup' =>
			'<div id="waggle-sidebar">
			  <form id="waggle-sidebar-search">
				<input type="textfield"/>
				<div class="autocomplete"></div>
			  </form>
			  <div class="waggle-search-messages"></div>
			</div>',
	  );
	  break;
  }
  
  return $block;
}


/*****   VIEWS HOOKS  ********/
function waggle_theme($existing) {
  return array(
    'views_view_fields__waggle_stories' => array (
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
      'template' => 'views-view-fields--waggle-stories',
      'base hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'waggle') . '/templates',
    ),
  );
}




/*****   API CALLS  ********/

/**
 *   function to load and return the current user
 */
function waggle_load_user(){
  global $user;
  return drupal_json_encode($user);
}

/**
 *  function to load default stories, pass them through the appropriate view, and return the rendered html
 */
function waggle_load_stories_default(){
  drupal_json_output(views_embed_view('waggle_stories', 'block'));
}

/**
 *  function to load stories of given nids, pass them through the appropriate view, and return the rendered html
 */
function waggle_load_stories($stories_arg){
  drupal_json_output(views_embed_view('waggle_stories', 'block', $stories_arg));
}

/**
 * Function to add a note to a given story nid.
 */
function waggle_add_note(){
  $get = $_GET;
  global $user;
  $node = node_load($get['nid']);
  // Return if the given nid is invalid, or belongs to a non-story node, or if the user-provided note is empty, or the user isn't logged in
  if (!$node || $node->type != 'story' || empty($get['note']) || $user->uid == 0) {
    return 'There was an error with your request.  If you continue to receive this message, please email ashelp@uky.edu or call 859-257-1541.';
  }
  
  $new_note = (object) array('type' => 'action');
  node_object_prepare($new_note);

  // Look for @users and #tags in the body
  $body_parts = explode(' ', $get['note']);
  $add_users = array();
  foreach($body_parts as $delta => $part){
    switch(substr($part, 0, 1) == '@'){
      case '@':
        $linkblue = substr($part, 1);
        $account = user_load_by_name($linkblue);
        if($account && $account->uid){
          if(!empty($account->field_name)){
            $name_parts = array();
            foreach(array('first', 'middle', 'last') as $name_part){
              if(!empty($account->field_name['und'][0][$name_part])){
                $name_parts[] = $account->field_name['und'][0][$name_part];
              }
            }
            $full_name = implode(' ', $name_parts);
          }
          else{
            $full_name = $account->name;
          }
          $body_parts[$delta] = '<span class="tagged-user user-' . $account->uid . '">' . $full_name . '</span>';
          $add_users[] = $account->uid;
        }
        
        break;

      case '#':
        break;

      default:
        break;
    }
  }

  //If users were added using @linkblue, only associate them if not already associated
  if(!empty($node->field_associated_users)){
    foreach($node->field_associated_users['und'] as $delta => $values){
      if(in_array($values['uid'], $add_users)){
        unset($add_users[array_search($values['uid'], $add_users)]);
      }
    }
  }
  foreach($add_users as $add_uid){
    $node->field_associated_users['und'][] = array('uid' => $add_uid);
  }
  
  $new_note->title = $get['nid'] . '-' . time();
  $new_note->body['und'][0]['value'] = implode(' ', $body_parts);
  $new_note->body['und'][0]['format'] = 'filtered_html';
  $new_note->field_story['und'][0]['nid'] = $get['nid'];
  node_save($new_note);
  if ($new_note) {
    $node->field_actions['und'][] = array('nid' => $new_note->nid);
    $node->revision = TRUE;
	  node_save($node);
  }
  drupal_json_output(views_embed_view('waggle_story_actions', 'block', $get['nid']));
  //return 'yes';
}

/**
 * Function to remove a given user from a given node.
 */
function waggle_remove_user($node, $uid){
  $found = FALSE;
  foreach($node->field_associated_users['und'] as $delta => $data){
    if($data['uid'] == $uid){
	  unset($node->field_associated_users['und'][$delta]);
	  node_save($node);
	  $found = TRUE;
	  break;
	}
  }
  drupal_json_output($found);
}

/**
 * Function to add a given user from a given node.
 */
function waggle_add_user($node, $uid){
  $found = FALSE;
  //Make sure the user isn't already attatched to this story
  foreach($node->field_associated_users['und'] as $delta => $data){
    if($data['uid'] == $uid){
	  $found = TRUE;
	  break;
	}
  }
  if(!$found){
    $node->field_associated_users['und'][] = array('uid' => $uid);
	node_save($node);
  }
  $account = user_load($uid);
  
  // @TODO This code mimicks the layout in views-view-fields--waggle-stories.tpl.php.  There may be a better way...
  $picture = '<img src="' . (empty($account->picture) ? drupal_get_path('module', 'waggle') . '/default_user.png' : file_create_url($account->picture->uri)) . '" alt="' . $account->name . '"/>';
  $name = array();
  if(!empty($account->field_name)){
    foreach($account->field_name['und']['0'] as $part){
	  if(!empty($part)){
	    $name[] = $part;
	  }
    }
  }
  $name = implode(' ', $name);
  $roll_over = 
    '<div class="associated-user-rollover">' .
  	  '<div class="picture">' . $picture . '</div>' . 
	  '<div class="name">' . $name . '</div>' . 
	  '<div class="linkblue">' . $account->name . '</div>' . 
	  '<a class="remove-user user-' . $uid . ' node-' . $node->nid . '" href="">Unassociate</a>' .
    '</div>';
  $json = '<div class="associated-user user-' . $uid . '"><div class="small-picture">' . $picture . '</div>' . $roll_over . '</div>';
  
  drupal_json_output($json);
}

/**
 * Autocomplete function for Add Associated User boxes
 */
function waggle_load_users(){  
  $query = db_select('users', 'u');
  $query->leftJoin('field_data_field_name', 'f', 'u.uid=f.entity_id');
  $results = $query->fields('u', array('uid', 'name', 'picture', 'mail'))
    ->fields('f', array('field_name_first', 'field_name_middle', 'field_name_last'))
	->condition('u.uid', array(0, 1), 'NOT IN')
	->execute()
	->fetchAllAssoc('uid');
	
  $accounts = array();
  foreach($results as $uid => $fields){
    $name_parts = array();
	foreach(array('field_name_first', 'field_name_middle', 'field_name_last') as $part){
	  if(!empty($fields->$part)){
	    $name_parts[] = $fields->$part;
	  }
	}
    $accounts[$uid] = array(
	  'name' => implode(' ', $name_parts),
	  'last_name' => $fields->field_name_last,
	  'first_name' => implode(' ', array($fields->field_name_first, $fields->field_name_middle)),
	  'mail' => $fields->mail,
	  'linkblue' => $fields->name,
	  'picture' => '<img src="' . ($fields->picture ? file_create_url(file_load($fields->picture)->uri) : drupal_get_path('module', 'waggle') . '/default_user.png') . '"/>',
	);
  }
  drupal_json_output($accounts);
  //return '';
}

function waggle_search(){
  if(!isset($_GET['s'])){
	return;
  }
  $keys = $_GET['s'];
  $index = search_api_index_load(1); 
  $offset = 0; 
  $limit = 10; 
  $fields = NULL; 
  $sort = NULL; 
  $filters = NULL;
  
  // Slight "hack" for testing complex queries.
  if ($keys == '|COMPLEX|') {
    $keys = array(
      '#conjunction' => 'AND',
      'test',
      array(
        '#conjunction' => 'OR',
        'baz',
        'foobar',
      ),
      array(
        '#conjunction' => 'AND',
        '#negation' => TRUE,
        'bar',
      ),
    );
  }
  $query = $index->query()
    ->keys($keys)
    ->range($offset, $limit);
  if ($fields) {
    $query->fields(explode(',', $fields));
  }
  if ($sort) {
    $sort = explode(',', $sort);
    $query->sort($sort[0], $sort[1]);
  }
  else {
    $query->sort('search_api_id', 'ASC');
  }
  if ($filters) {
    $filters = explode(',', $filters);
    foreach ($filters as $filter) {
      $filter = explode('=', $filter);
      $query->condition($filter[0], $filter[1]);
    }
  }
  $result = $query->execute();

  $nids = array();
  foreach($result['results'] as $nid => $fields){
	$nids[] = $nid;
  }
  
  drupal_json_output($nids);
}
