<?php

/**
 * Implements hook_menu().
 */
function waggle_search_menu() {
  $items['waggle/api/saved-search-count'] = array(
    'page callback' => 'waggle_search_ajax_search_count',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['waggle/api/remove-saved-search'] = array(
    'page callback' => 'waggle_search_remove',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function waggle_search_ajax_search_count() {
  //$index = search_api_index_load_multiple(array('Default node index'));
  $query = search_api_query('default_node_index',
    array(
      'limit' => 0,
      'search_id' => 'waggle_saved',
    )
  );
  $result = $query->execute();
  drupal_json_output($result);
  drupal_exit();
}

/**
 *  Implements hook_search_api_solr_query_alter().
 *
 *  Rewrite waggle's microsyntax (e.g., @user and #tag) for processing by Solr's dismax parser.
 */
function waggle_search_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $waggle_search_string = isset($_GET['ws'])?$_GET['ws']:'';

  $sigil_fields = array(
    '#' => "sm_field_tags\\:name",
    '@' => "sm_field_associated_users\\:name",
  );

  $field_transforms = array(
    'author:' => 'tm_author\\:name:',
    'status:' => 'is_field_status:',
    'office:' => 'tm_author\\:field_office:',
    'id:' => 'item_id:',
  );

  // If status is not explicitly mentioned anywhere, exclude 'done' (tid:2) tasks.
  if (!preg_match('/\bstatus:\b/', $waggle_search_string)) {
    if (empty($waggle_search_string)) {
      $waggle_search_string = '-status:2';
    } else {
      $waggle_search_string = "($waggle_search_string) -status:2";
    }
  }

  $built_query = '';
  $nest_level = 0;
  $matches = array();

  if (preg_match_all("/\(|\)|\<AND\>|\<OR\>|(-)?(\w+:)?((.?\".*?\")|[^\s()]+)/", $waggle_search_string, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match_index => $match) {
      if ($match[0] === 'AND' || $match[0] === 'OR') {
        $built_query .= ' ' . $match[0];
      } elseif ($match[0] === '(') {
        $built_query .= '(';
        $nest_level++;
      } elseif ($match[0] === ')') {
        if ($nest_level-- > 0)
          $built_query .= ')';
      } elseif (array_key_exists($match[2], $field_transforms)) {
        if ($match[3] != 'any') {
          $built_query .= $match[1] . $field_transforms[$match[2]] . $match[3];
        }
        // TODO: lookup by term name, to support, e.g. 'status:done'
      } elseif (array_key_exists($match[3][0], $sigil_fields)) {
        // TODO: more general way to do this, rather than manually lowercasing usernames
        if ($match[3][0] == '@') {
          $built_query .= $match[1] . $sigil_fields[$match[3][0]] . ':' . strtolower(substr($match[3],1));
        } else {
          $built_query .= $match[1] . $sigil_fields[$match[3][0]] . ':' . substr($match[3],1);
        }
      } else {
        //$built_query .= "((tm_title:".$match[0].") OR (tm_body\:value:".$match[0].") OR (tm_search_api_viewed:".$match[0]."))";
        //$built_query .= "((tm_title:".$match[0].") OR (tm_body\:value:".$match[0].") OR (tm_search_api_aggregation_1:".$match[0]."))";
        $built_query .= "(tm_search_api_aggregation_1:".$match[0].")";
      }
      $built_query .= ' ';
    }
    while ($nest_level-- > 0) {
      $built_query .= ')';
    }
  }

  $call_args['params']['fq'][] = $built_query;
}

/**
 * Implements hook_block_info().
 */
function waggle_search_block_info() {
  $blocks['waggle_story_sidebar'] = array(
    'info' => 'Waggle Story Search',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function waggle_search_block_view($delta = '') {
  switch ($delta) {
    case 'waggle_story_sidebar' :
      return array(
        'subject' => NULL,
        'content' => drupal_render(drupal_get_form('waggle_story_sidebar')) . drupal_render(drupal_get_form('waggle_saved_searches_sidebar')),
      );
      break;
  }
}

/**
 * Renders the sidebar for Waggle pages dealing with story search
 *    Current possible $_GET data:
 *        ?ws = Microsyntax search string.
 */
function waggle_story_sidebar($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'waggle_search') . '/waggle_search.js');
  drupal_add_css(drupal_get_path('module', 'waggle_search') . '/waggle_search.css');

  $form['search_container'] = array(
    '#type' => 'container',
  );

  $form['search_container']['search'] = array(
    '#title' => 'Search',
    '#type' =>'textfield',
    '#size' => 20,
    '#maxlength' => 1024,
    '#default_value' => isset($_GET['ws']) ? $_GET['ws'] : '',
    '#suffix' => '<a id="waggle-story-sidebar-save-help-expand"><i>' . t('help') . '</i></a>',
  );

  $form['search_container']['help'] = array(
    '#markup' => '<div id="waggle-story-sidebar-save-help-container">Use search to locate stories you\'re interested in! ' .
      'Here are some examples: ' .
      '<ul>' .
      '<li>@user</li>' .
      '<li>#tag</li>' .
      '<li>@user OR #tag</li>' .
      '<li>free AND (speech OR beer)</li>' .
      '<li>status:any</li>' .
      '<li>author:user</li>' .
      '</ul></div>',
  );


  /*$form['search_container']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'search',
    //'#prefix' => '<div style="display: none">',
    //'#suffix' => '</div>',
  );*/

  $form['saved_searches'] = array(
    '#markup' => '',
  );

  global $user;
  $query = db_select('waggle_saved_searches','w')
    ->fields('w')
    ->condition('w.uid', $user->uid);
  $result = $query->execute();

  $search_api_query = search_api_query('default_node_index', array('limit' => 0));

  while ($record = $result->fetchAssoc()) {
    $form['saved_searches']['#markup'] .=
      //l($record['title'], $record['search_string']);
      '<div class="saved-search-link">' .
      '<a href="?ws=' . urlencode($record['search_string']) . '">' . $record['title'] . '</a><a>';
    global $_GET;
    $original_ws = $_GET['ws'];
    $_GET['ws'] = $record['search_string'];
    try {
      $saved_search_count = $search_api_query->execute();
      $form['saved_searches']['#markup'] .= ' (' . $saved_search_count['result count'] . ')';
    } catch (SearchApiException $sae) {
      watchdog('waggle', 'SearchApiException in saved search "%n" on %u (%uid).', array('%n' => $record['title'], '%u' => user_load($record['uid'])->name, '%uid' => $record['uid']), WATCHDOG_ERROR);
    }
    $_GET['ws'] = $original_ws;

    $form['saved_searches']['#markup'] .= '</a> <a class="saved-search-delete" href="#"><i class="icon-remove"></i></a></div>';
  }

  $form['prompt'] = array(
    '#markup' => '<a id="waggle-story-sidebar-save-expand"><i>' . t('save') . '...</i></a>',
  );

  $form['saved_searches_container'] = array(
    '#type' => 'container',
  );

  $form['saved_searches_container']['save_new_search'] = array(
    '#type' => 'container',
    '#title' => 'Save new search',

    'save_name_textbox' => array(
      '#title' => 'Save current search as',
      '#type' => 'textfield',
      '#size' => 20,
      '#maxlength' => 80,
      //'#required' => TRUE,
    ),
    'save_submit' => array(
      '#type' => 'submit',
      '#value' => 'Save',
      //'#submit' => array('waggle_story_sidebar_submit_save_search'),
    ),
  );



  return $form;
}

function waggle_saved_searches_sidebar($form, &$form_state) {
  return $form;
}



function waggle_story_sidebar_submit($form, $form_state) {
  $path = $_GET['q'];
  $options = array();
  global $user;
  if (!empty($form_state['values']['save_name_textbox'])) {
    if (!empty($form_state['values']['search'])) {
      $result = db_select('waggle_saved_searches','w')
        ->fields('w')
        ->condition('uid', $user->uid)
        ->condition('title', trim($form_state['values']['save_name_textbox']))
        ->execute()
        ->rowCount();
      if ($result == 0) {
        db_insert('waggle_saved_searches')
          ->fields(array(
            'uid' => $user->uid,
            'title' => $form_state['values']['save_name_textbox'],
            'search_string' => $form_state['values']['search'],
          ))
          ->execute();
      }
      else {
        db_update('waggle_saved_searches')
          ->fields(array('search_string' => $form_state['values']['search']))
          ->condition('uid', $user->uid)
          ->condition('title', $form_state['values']['save_name_textbox'])
          ->execute();
      }
        
    }
  }
  if (!empty($form_state['values']['search'])) {
    $options = array('query' => array('ws' => $form_state['values']['search']));
  }
  drupal_goto($path, $options);
  return '';
}

function waggle_search_remove() {
  global $user;
  
  $title = check_plain($_POST['name']);

  watchdog('waggle', t(':u is deleting saved search ":s".', array(':u'=>$user->name, ':s'=>$title)));

  if (!($user->uid && $title)) {
    return FALSE;
  }

  db_delete('waggle_saved_searches')
    ->condition('uid', $user->uid)
    ->condition('title', $title)
    ->execute();

  return TRUE;
}

